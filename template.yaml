AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: DuoBolo online stack

Parameters:
  StageParameter:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - dev
    Description: Stage name

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Runtime: python3.12
    Handler: app.lambda_handler
    Architectures:
      - arm64
    Environment:
      Variables:
        PLAYER_STORAGE_TABLE: !Ref PlayerStorageTable

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      StageName: !Ref StageParameter
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowMethods: "'GET,PUT,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
      Models:
        PostMatchResultModel:
          type: object
          required:
            - matchId
            - players
          properties:
            matchId:
              type: string
            players:
              type: array
              items:
                type: object
                required:
                  - playerId
                  - cubesDropped
                properties:
                  playerId:
                    type: string
                  cubesDropped:
                    type: integer

  #
  # COGNITO
  #

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-userpool'
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: True
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: False
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: False
      Schema:
        - Name: email
          Required: True
          Mutable: False
      #        - Name: preferred_username
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailMessageByLink: "You DuoBoloGames account was created. {##Please verify using this link##}."
        EmailSubjectByLink: "DuoBoloGames - Account verification"
      #      EmailConfiguration:
      #        EmailSendingAccount: DEVELOPER
      #        SourceArn:
      #        # TODO CHANGE
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmSignUpFunction.Arn
        PreSignUp: !GetAtt PreSignUpFunction.Arn

  UserPoolAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Admin group
      GroupName: Admin
      UserPoolId: !Ref UserPool

  OnCognitoPostConfirmationSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostConfirmSignUpFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}

  OnCognitoPreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUpFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub ${StageParameter}-duobolo-userpooldomain

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AWS::StackName}-userpoolclient'
      GenerateSecret: False
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
      IdTokenValidity: 1
      TokenValidityUnits:
        AccessToken: days
        IdToken: days
        RefreshToken: days

  #
  # DB
  #

  PlayerStorageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-playerstorage'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH

  #
  # STUFF
  #

  AllowAllRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: allowallrole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
                - dynamodb.amazonaws.com
                - gamelift.amazonaws.com
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowAllPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow # TODO MORE STRICT
                Action: '*'
                Resource: '*'

  # MATCHMAKING

  MatchmakingStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: matchmaking.yaml
      Parameters:
        StageParameter: !Ref StageParameter
        AllowAllRoleArn: !GetAtt AllowAllRole.Arn
        AllowAllRoleName: allowallrole
        CognitoUserPoolId: !Ref UserPool
        CognitoUserPoolClientId: !Ref UserPoolClient
        PlayerStorageTable: !Ref PlayerStorageTable

  #
  # FUNCTIONS
  #

  Dependencies:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-dependencies'
      Description: Dependencies for the Lambda functions
      ContentUri: py_deps/
      CompatibleArchitectures:
        - arm64
      CompatibleRuntimes:
        - python3.12

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-helloworld'
      CodeUri: hello_world/
      Role: !GetAtt AllowAllRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref Api

  SrvPostMatchResultFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-postmatchresult'
      CodeUri: srv_postmatchresult/
      Role: !GetAtt AllowAllRole.Arn
      Environment:
        Variables:
          MATCHES_TABLE: !GetAtt MatchmakingStack.Outputs.MatchesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /server/postmatchresult
            Method: post
            RestApiId: !Ref Api
            RequestModel:
              Model: PostMatchResultModel
              ValidateBody: true

  UserGetSelfFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-uesrgetself'
      CodeUri: user_get_self/
      Role: !GetAtt AllowAllRole.Arn
      Layers:
        - !Ref Dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId: !Ref Api
            Auth:
              Authorizer: CognitoAuthorizer

  PostConfirmSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-postconfirmsignup'
      CodeUri: post_confirm_sign_up/
      Role: !GetAtt AllowAllRole.Arn

  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-lambda-presignup'
      CodeUri: pre_sign_up/
      Role: !GetAtt AllowAllRole.Arn

Outputs:
  UserPoolClientID:
    Value: !Ref UserPoolClient
    Description: User Pool Client ID
  ApiUrl:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com
    Description: API Endpoint URL