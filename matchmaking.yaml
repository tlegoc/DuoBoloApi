AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: matchmaking stack

Globals:
  Function:
    Timeout: 5
    Runtime: python3.12
    Handler: app.lambda_handler

# Parameters
Parameters:
  StageParameter:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - dev
    Description: Stage name
  AllowAllRoleArn:
    Type: String
    Description: The ARN of the role that allows all actions. This is used for the Lambda functions.
  CognitoUserPoolId:
    Type: String
    Description: The ID of the Cognito User Pool to use for authentication.
  CognitoUserPoolClientId:
    Type: String
    Description: The ID of the Cognito User Pool Client to use for authentication.

Outputs:
  ApiEndpoint:
    Description: The endpoint of the WebSocket API
    Value: !Sub 'wss://${Api}.execute-api.${AWS::Region}.amazonaws.com/${StageParameter}'

Resources:
  Api:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  #
  # FLEXMATCH
  #

  MatchmakingRuleSet:
    Type: AWS::GameLift::MatchmakingRuleSet
    Properties:
      Name: !Sub '${AWS::StackName}-ruleset'
      RuleSetBody: '{
    "ruleLanguageVersion": "1.0",
    "teams": [{
        "name": "player",
        "minPlayers": 1,
        "maxPlayers": 1,
        "quantity": 2
    }],
    "playerAttributes": [{
        "name": "skill",
        "type": "number"
    }],
    "rules": [{
        "name": "SimilarSkill",
        "type": "batchDistance",
        "batchAttribute": "skill",
        "maxDistance": 10
    }],
    "expansions": [{
        "target": "rules[SimilarSkill].maxDistance",
        "steps": [{
            "waitTimeSeconds": 10,
            "value": 20
        }, {
            "waitTimeSeconds": 20,
            "value": 40
        }, {
            "waitTimeSeconds": 30,
            "value": 99999
        }]
    }]
}'

  MatchmakingEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub '${AWS::StackName}-matchmakingeventtopic'

  MatchmakingConfiguration:
    Type: 'AWS::GameLift::MatchmakingConfiguration'
    Properties:
      AcceptanceRequired: false
      #      AcceptanceTimeoutSeconds: 10
      #      CustomEventData: String
      Description: "Default matchmaking configuration for standard 1v1v1v1 matches"
      FlexMatchMode: STANDALONE
      Name: !Sub '${AWS::StackName}-matchmakingconfiguration'
      NotificationTarget: !GetAtt MatchmakingEventTopic.TopicArn
      RequestTimeoutSeconds: 300
      RuleSetArn: !GetAtt MatchmakingRuleSet.Arn
      RuleSetName: !Ref MatchmakingRuleSet
  
  OnMatchFoundLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-onmatchfound'
      CodeUri: mm_onmatchfound/
      Role: !Ref AllowAllRoleArn
      Architectures:
        - arm64
      Environment:
        Variables:
          REGION: !Ref 'AWS::Region'
          MATCHMAKING_CONFIG_NAME: !Ref MatchmakingConfiguration
          WEBSOCKET_API_ID: !Ref Api
          STAGE: !Ref StageParameter
      Events:
        MatchmakingEvent:
          Type: SNS
          Properties:
            Topic: !Ref MatchmakingEventTopic
            FilterPolicyScope: "MessageBody"
            FilterPolicy: '{ "detail": {
              "type": ["MatchmakingSucceeded"]
            }}'

  OnTicketDroppedLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-onticketdropped'
      CodeUri: mm_onticketdropped/
      Role: !Ref AllowAllRoleArn
      Architectures:
        - arm64
      Environment:
        Variables:
          REGION: !Ref 'AWS::Region'
          MATCHMAKING_CONFIG_NAME: !Ref MatchmakingConfiguration
          WEBSOCKET_API_ID: !Ref Api
          STAGE: !Ref StageParameter
      Events:
        MatchmakingEvent:
          Type: SNS
          Properties:
            Topic: !Ref MatchmakingEventTopic
            FilterPolicyScope: "MessageBody"
            FilterPolicy: '{ "detail": {
              "type": ["MatchmakingTimedOut", "MatchmakingFailed"]
            }}'

  #
  # SERVER
  #

  ContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      RepositoryPolicyText: '{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Allow",
            "Effect": "Allow",
            "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
            },
            "Action": [
                "ecr:*"
            ]
        }
    ]
}'

  GameServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}-container'
      RetentionInDays: 7

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref AllowAllRoleArn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !Ref AllowAllRoleArn
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-container'
          Essential: true
          Image: !GetAtt ContainerRepository.RepositoryUri
          PortMappings:
            - ContainerPort: 13333
              Protocol: udp
          RestartPolicy:
            Enabled: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/${AWS::StackName}-container'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Base: 1
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/16
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable UDP access for game server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          CidrIpv6: "::/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
        - IpProtocol: "-1"
          CidrIpv6: "::/0"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-sg'

  #
  # AUTH
  #

  AuthDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-auth-dep'
      Description: Auth dependencies layer
      ContentUri: auth_dependencies/
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - python3.12

  # CONNECTION
  OnConnectLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-onconnect'
      CodeUri: mm_onconnect/
      Role: !Ref AllowAllRoleArn
      Architectures:
        - x86_64
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref 'CognitoUserPoolId'
          COGNITO_USER_POOL_CLIENT_ID: !Ref 'CognitoUserPoolClientId'
          COGNITO_REGION: !Ref 'AWS::Region'
          MATCHMAKING_CONFIG_NAME: !Ref MatchmakingConfiguration
      Layers:
        - !Ref AuthDependenciesLayer

  OnConnectFunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref OnConnectLambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*'

  OnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectLambdaFunction.Arn}/invocations'

  OnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: $connect
      OperationName: connect
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref OnConnectIntegration


  # DISCONNECT
  OnDisconnectLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ondisconnect'
      CodeUri: mm_ondisconnect/
      Role: !Ref AllowAllRoleArn
      Architectures:
        - arm64

  OnDisconnectFunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref OnDisconnectLambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*'

  OnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectLambdaFunction.Arn}/invocations

  OnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: disconnect
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref OnDisconnectIntegration

  # MISC
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - OnConnectRoute
      - OnDisconnectRoute
    Properties:
      ApiId: !Ref Api

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageParameter
      DeploymentId: !Ref Deployment
      ApiId: !Ref Api